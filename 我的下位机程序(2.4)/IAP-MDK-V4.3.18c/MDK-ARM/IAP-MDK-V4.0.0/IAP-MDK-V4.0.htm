<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [IAP-MDK-V4.0.0\IAP-MDK-V4.0.0]</title></head>
<body><HR>
<H1>Static Call Graph for image IAP-MDK-V4.0.0\IAP-MDK-V4.0.0</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Sep 06 16:51:20 2021
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; plc_user_scan &rArr; plc_input_scan &rArr; plc_input_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f1xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f1xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f1xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f1xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f1xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f1xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f1xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from stm32f1xx_it.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4a]">I2C_DMAAbort</a> from stm32f1xx_hal_i2c.o(i.I2C_DMAAbort) referenced from stm32f1xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from stm32f1xx_it.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from stm32f1xx_it.o(i.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from stm32f1xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from stm32f1xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from stm32f1xx_it.o(i.TIM6_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from stm32f1xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from stm32f1xx_it.o(i.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from stm32f1xx_it.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from stm32f1xx_it.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f1xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from stm32f1xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[49]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f1xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f1xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f1xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from stm32f1xx_it.o(i.USB_HP_CAN1_TX_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f1xx_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[61]">eMBFuncReadHoldingRegisterMaster</a> from mb_func_holding.o(i.eMBFuncReadHoldingRegisterMaster) referenced from mb_port.o(.data)
 <LI><a href="#[60]">eMBFuncReadHoldingRegisterSlave</a> from mb_func_holding.o(i.eMBFuncReadHoldingRegisterSlave) referenced from mb_port.o(.data)
 <LI><a href="#[67]">eMBFuncReadWriteMultipleHoldingRegisterMaster</a> from mb_func_holding.o(i.eMBFuncReadWriteMultipleHoldingRegisterMaster) referenced from mb_port.o(.data)
 <LI><a href="#[66]">eMBFuncReadWriteMultipleHoldingRegisterSlave</a> from mb_func_holding.o(i.eMBFuncReadWriteMultipleHoldingRegisterSlave) referenced from mb_port.o(.data)
 <LI><a href="#[65]">eMBFuncWriteHoldingRegisterMaster</a> from mb_func_holding.o(i.eMBFuncWriteHoldingRegisterMaster) referenced from mb_port.o(.data)
 <LI><a href="#[64]">eMBFuncWriteHoldingRegisterSlave</a> from mb_func_holding.o(i.eMBFuncWriteHoldingRegisterSlave) referenced from mb_port.o(.data)
 <LI><a href="#[63]">eMBFuncWriteMultipleHoldingRegisterMaster</a> from mb_func_holding.o(i.eMBFuncWriteMultipleHoldingRegisterMaster) referenced from mb_port.o(.data)
 <LI><a href="#[62]">eMBFuncWriteMultipleHoldingRegisterSlave</a> from mb_func_holding.o(i.eMBFuncWriteMultipleHoldingRegisterSlave) referenced from mb_port.o(.data)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[59]">mb_ascii_frame_conform</a> from mb_ascii.o(i.mb_ascii_frame_conform) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[55]">mb_ascii_receive</a> from mb_ascii.o(i.mb_ascii_receive) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[56]">mb_ascii_rev_adjust</a> from mb_ascii.o(i.mb_ascii_rev_adjust) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[58]">mb_ascii_segmentation</a> from mb_ascii.o(i.mb_ascii_segmentation) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[57]">mb_ascii_snd_frame</a> from mb_ascii.o(i.mb_ascii_snd_frame) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[54]">mb_rtu_frame_conform</a> from mb_rtu.o(i.mb_rtu_frame_conform) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[50]">mb_rtu_receive</a> from mb_rtu.o(i.mb_rtu_receive) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[51]">mb_rtu_rev_adjust</a> from mb_rtu.o(i.mb_rtu_rev_adjust) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[53]">mb_rtu_segmentation</a> from mb_rtu.o(i.mb_rtu_segmentation) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[52]">mb_rtu_snd_frame</a> from mb_rtu.o(i.mb_rtu_snd_frame) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[4f]">mb_tcp_frame_conform</a> from mb_tcp.o(i.mb_tcp_frame_conform) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[4b]">mb_tcp_receive</a> from mb_tcp.o(i.mb_tcp_receive) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[4c]">mb_tcp_rev_adjust</a> from mb_tcp.o(i.mb_tcp_rev_adjust) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[4e]">mb_tcp_segmentation</a> from mb_tcp.o(i.mb_tcp_segmentation) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[4d]">mb_tcp_snd_frame</a> from mb_tcp.o(i.mb_tcp_snd_frame) referenced from mb_port.o(i.mb_port_init)
 <LI><a href="#[5d]">plc_motor_curve_buf_pos</a> from plc_motor.o(i.plc_motor_curve_buf_pos) referenced from plc_motor.o(i.plc_motor_modbus_write)
 <LI><a href="#[5d]">plc_motor_curve_buf_pos</a> from plc_motor.o(i.plc_motor_curve_buf_pos) referenced from plc_motor.o(i.plc_motor_set_step_pos_flow)
 <LI><a href="#[5b]">plc_motor_curve_buf_rst</a> from plc_motor.o(i.plc_motor_curve_buf_rst) referenced from plc_motor.o(i.plc_motor_modbus_write)
 <LI><a href="#[5b]">plc_motor_curve_buf_rst</a> from plc_motor.o(i.plc_motor_curve_buf_rst) referenced from plc_motor.o(i.plc_motor_set_step_rst_flow)
 <LI><a href="#[5f]">plc_motor_curve_init_pos</a> from plc_motor.o(i.plc_motor_curve_init_pos) referenced from plc_motor.o(i.plc_motor_modbus_write)
 <LI><a href="#[5f]">plc_motor_curve_init_pos</a> from plc_motor.o(i.plc_motor_curve_init_pos) referenced from plc_motor.o(i.plc_motor_set_step_pos_flow)
 <LI><a href="#[5c]">plc_motor_curve_init_rst</a> from plc_motor.o(i.plc_motor_curve_init_rst) referenced from plc_motor.o(i.plc_motor_modbus_write)
 <LI><a href="#[5c]">plc_motor_curve_init_rst</a> from plc_motor.o(i.plc_motor_curve_init_rst) referenced from plc_motor.o(i.plc_motor_set_step_rst_flow)
 <LI><a href="#[5e]">plc_motor_pul_action_pos</a> from plc_motor.o(i.plc_motor_pul_action_pos) referenced from plc_motor.o(i.plc_motor_modbus_write)
 <LI><a href="#[5e]">plc_motor_pul_action_pos</a> from plc_motor.o(i.plc_motor_pul_action_pos) referenced from plc_motor.o(i.plc_motor_set_step_pos_flow)
 <LI><a href="#[5a]">plc_motor_pul_action_rst</a> from plc_motor.o(i.plc_motor_pul_action_rst) referenced from plc_motor.o(i.plc_motor_modbus_write)
 <LI><a href="#[5a]">plc_motor_pul_action_rst</a> from plc_motor.o(i.plc_motor_pul_action_rst) referenced from plc_motor.o(i.plc_motor_set_step_rst_flow)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[68]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[183]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[184]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[185]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[186]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[187]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[188]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_freq_down
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_rst
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_modbus_read
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_rst
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_modbus_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_freq_down
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_rst
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_pos
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_rst
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
</UL>

<P><STRONG><a name="[171]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_pos
</UL>

<P><STRONG><a name="[18c]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_freq_down
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_rst
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_pos
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_rst
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_modbus_write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_rst
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_pos
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_freq_down
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_rst
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_pos
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_rst
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_modbus_write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_modbus_read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_freq_down
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_rst
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_pos
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_rst
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_freq_down
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_rst
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_pos
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_rst
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_freq_down
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_rst
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_pos
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_rst
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_rst
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_rst
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_pos
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_freq_down
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_buf_pos
</UL>

<P><STRONG><a name="[18e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[79]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[74]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[69]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[190]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>Close_read_camera</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, plc_test.o(i.Close_read_camera))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_pos
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>EHT_GET_TICK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eth_spi.o(i.EHT_GET_TICK))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_user_init
</UL>

<P><STRONG><a name="[7d]"></a>EHT_SPI_ReadByte1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, eth_spi.o(i.EHT_SPI_ReadByte1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadBuffer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte1
</UL>

<P><STRONG><a name="[7f]"></a>EHT_SPI_WriteByte1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eth_spi.o(i.EHT_SPI_WriteByte1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EHT_SPI_WriteByte1 &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadBuffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteBuffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte1
</UL>

<P><STRONG><a name="[81]"></a>EHT_SPI_WriteByte2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, eth_spi.o(i.EHT_SPI_WriteByte2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EHT_SPI_WriteByte2 &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadBuffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteBuffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte1
</UL>

<P><STRONG><a name="[82]"></a>ETH_SOCKET_ReadBuffer</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, eth_socket.o(i.ETH_SOCKET_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ETH_SOCKET_ReadBuffer &rArr; ETH_SOCKET_ReadByte2 &rArr; EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetCS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_ReadByte1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte2
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_tcp_receive
</UL>

<P><STRONG><a name="[87]"></a>ETH_SOCKET_ReadByte1</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, eth_socket.o(i.ETH_SOCKET_ReadByte1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ETH_SOCKET_ReadByte1 &rArr; EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetCS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_ReadByte1
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteBuffer
</UL>

<P><STRONG><a name="[83]"></a>ETH_SOCKET_ReadByte2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, eth_socket.o(i.ETH_SOCKET_ReadByte2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ETH_SOCKET_ReadByte2 &rArr; EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetCS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_ReadByte1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadBuffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteBuffer
</UL>

<P><STRONG><a name="[112]"></a>ETH_SOCKET_RemoteVarConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eth_socket.o(i.ETH_SOCKET_RemoteVarConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_SOCKET_RemoteVarConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_user_init
</UL>

<P><STRONG><a name="[88]"></a>ETH_SOCKET_WriteBuffer</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, eth_socket.o(i.ETH_SOCKET_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ETH_SOCKET_WriteBuffer &rArr; ETH_SOCKET_ReadByte2 &rArr; EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetCS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte1
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte1
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_send
</UL>

<P><STRONG><a name="[86]"></a>ETH_SOCKET_WriteByte1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, eth_socket.o(i.ETH_SOCKET_WriteByte1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ETH_SOCKET_WriteByte1 &rArr; EHT_SPI_WriteByte2 &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetCS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadBuffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteBuffer
</UL>

<P><STRONG><a name="[85]"></a>ETH_SOCKET_WriteByte2</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, eth_socket.o(i.ETH_SOCKET_WriteByte2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ETH_SOCKET_WriteByte2 &rArr; EHT_SPI_WriteByte2 &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetCS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadBuffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteBuffer
</UL>

<P><STRONG><a name="[89]"></a>ETH_SOCKET_WriteByte4</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, eth_socket.o(i.ETH_SOCKET_WriteByte4))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ETH_SOCKET_WriteByte4 &rArr; EHT_SPI_WriteByte2 &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetCS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte1
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteBuffer
</UL>

<P><STRONG><a name="[84]"></a>ETH_SPI_SetCS</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eth_spi.o(i.ETH_SPI_SetCS))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadBuffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteBuffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteByte1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadByte1
</UL>

<P><STRONG><a name="[8b]"></a>ETH_SPI_SetRst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eth_spi.o(i.ETH_SPI_SetRst))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_user_init
</UL>

<P><STRONG><a name="[111]"></a>ETH_W5500_LocalVarConfig</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, eth_w5500.o(i.ETH_W5500_LocalVarConfig))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_user_init
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_can_receive
</UL>

<P><STRONG><a name="[8d]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; plc_can_receive &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>HAL_CAN_Init</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[94]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_RxFifo1MsgPendingCallback &rArr; plc_can_receive &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_can_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[a1]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, app_exti.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
</UL>

<P><STRONG><a name="[8a]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_rs485_dir
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_set_port
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_pul
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_dir
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_set_dir
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetCS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetRst
</UL>

<P><STRONG><a name="[7c]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_snd_update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_write_buf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_read_buf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_read_value
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_scan
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_scan
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_delay_scan
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_scan
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_scan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_snd_outtime
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_rcv_update
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_rcv_outtime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_send
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_bridge
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run_bridge
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_GET_TICK
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[f5]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[ab]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_AddrCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_SB
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADDR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[af]"></a>HAL_I2C_Init</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_ListenCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[f8]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_MasterRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[fa]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_MasterTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[f9]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_i2c.o(i.HAL_I2C_MemRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[fb]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_i2c.o(i.HAL_I2C_MemTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[b2]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 526 bytes, Stack size 64 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_read_buf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_read_value
</UL>

<P><STRONG><a name="[b6]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_write_buf
</UL>

<P><STRONG><a name="[b0]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
</UL>

<P><STRONG><a name="[ad]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTickFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_MspInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bb]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b1]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[108]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 740 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c3]"></a>HAL_SPI_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_SPI_Receive</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_ReadByte1
</UL>

<P><STRONG><a name="[80]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_SPI_WriteByte1
</UL>

<P><STRONG><a name="[c5]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[be]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c8]"></a>HAL_SetTickFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_SetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SetTickFreq &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[145]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_timer_insert
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run_motor
</UL>

<P><STRONG><a name="[14e]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_timer_deletc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_motor
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f1xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, app_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[e4]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>HAL_UART_MspInit</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, stm32f1xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_user_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[ee]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[f0]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_user_init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_send
</UL>

<P><STRONG><a name="[ea]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, app_usart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; mb_timer_snd_update
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_snd_update
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_rs485_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C1_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>SystemClock_Config</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM1_TRG_COM_TIM11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_TRG_COM_TIM11_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; plc_motor_pul_action
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[e2]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[dc]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USB_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; plc_can_receive &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; plc_can_receive &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[191]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[192]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[193]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[109]"></a>button_con</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, plc_test.o(i.button_con))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = button_con
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_switch_scan
</UL>

<P><STRONG><a name="[61]"></a>eMBFuncReadHoldingRegisterMaster</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mb_func_holding.o(i.eMBFuncReadHoldingRegisterMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReadHoldingRegisterMaster
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_txd_frame_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>eMBFuncReadHoldingRegisterSlave</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, mb_func_holding.o(i.eMBFuncReadHoldingRegisterSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = eMBFuncReadHoldingRegisterSlave &rArr; eMBRegHoldingCB &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>eMBFuncReadWriteMultipleHoldingRegisterMaster</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mb_func_holding.o(i.eMBFuncReadWriteMultipleHoldingRegisterMaster))
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>eMBFuncReadWriteMultipleHoldingRegisterSlave</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, mb_func_holding.o(i.eMBFuncReadWriteMultipleHoldingRegisterSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegisterSlave &rArr; eMBRegHoldingCB &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>eMBFuncWriteHoldingRegisterMaster</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mb_func_holding.o(i.eMBFuncWriteHoldingRegisterMaster))
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>eMBFuncWriteHoldingRegisterSlave</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mb_func_holding.o(i.eMBFuncWriteHoldingRegisterSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = eMBFuncWriteHoldingRegisterSlave &rArr; eMBRegHoldingCB &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>eMBFuncWriteMultipleHoldingRegisterMaster</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb_func_holding.o(i.eMBFuncWriteMultipleHoldingRegisterMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBFuncWriteMultipleHoldingRegisterMaster
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_txd_frame_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>eMBFuncWriteMultipleHoldingRegisterSlave</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, mb_func_holding.o(i.eMBFuncWriteMultipleHoldingRegisterSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = eMBFuncWriteMultipleHoldingRegisterSlave &rArr; eMBRegHoldingCB &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>eMBRegHoldingCB</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, mb_cb.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = eMBRegHoldingCB &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_read
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegisterSlave
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegisterSlave
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegisterSlave
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegisterSlave
</UL>

<P><STRONG><a name="[110]"></a>eth_user_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, eth_user.o(i.eth_user_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eth_user_init &rArr; ETH_SOCKET_RemoteVarConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_W5500_LocalVarConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SPI_SetRst
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_RemoteVarConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EHT_GET_TICK
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_tcp_init
</UL>

<P><STRONG><a name="[17a]"></a>finishRun</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, plc_test.o(i.finishRun))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_pos
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = main &rArr; plc_user_scan &rArr; plc_input_scan &rArr; plc_input_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_scan
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_user_poll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_user_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTickFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[59]"></a>mb_ascii_frame_conform</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mb_ascii.o(i.mb_ascii_frame_conform))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mb_ascii_frame_conform &rArr; prvucMBLRC
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvucMBLRC
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_txd_frame_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[119]"></a>mb_ascii_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mb_ascii.o(i.mb_ascii_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_ascii_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_port_init
</UL>

<P><STRONG><a name="[55]"></a>mb_ascii_receive</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, mb_ascii.o(i.mb_ascii_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mb_ascii_receive &rArr; mb_timer_rcv_update
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_rcv_update
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_rcv_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[56]"></a>mb_ascii_rev_adjust</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mb_ascii.o(i.mb_ascii_rev_adjust))
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[58]"></a>mb_ascii_segmentation</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mb_ascii.o(i.mb_ascii_segmentation))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mb_ascii_segmentation &rArr; prvucMBLRC
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvucMBLRC
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_frame_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[57]"></a>mb_ascii_snd_frame</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mb_ascii.o(i.mb_ascii_snd_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mb_ascii_snd_frame &rArr; mb_serial_send &rArr; ETH_SOCKET_WriteBuffer &rArr; ETH_SOCKET_ReadByte2 &rArr; EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_snd_outtime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[124]"></a>mb_err_frame</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mb_err.o(i.mb_err_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mb_err_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_port_poll
</UL>

<P><STRONG><a name="[129]"></a>mb_master_get_buf_id</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mb_master.o(i.mb_master_get_buf_id))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_send
</UL>

<P><STRONG><a name="[120]"></a>mb_port_init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, mb_port.o(i.mb_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_port_init &rArr; mb_tcp_init &rArr; eth_user_init &rArr; ETH_SOCKET_RemoteVarConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_tcp_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_user_init
</UL>

<P><STRONG><a name="[123]"></a>mb_port_poll</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, mb_port.o(i.mb_port_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mb_port_poll &rArr; mb_err_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_err_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_user_poll
</UL>

<P><STRONG><a name="[54]"></a>mb_rtu_frame_conform</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mb_rtu.o(i.mb_rtu_frame_conform))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mb_rtu_frame_conform &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_txd_frame_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[122]"></a>mb_rtu_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mb_rtu.o(i.mb_rtu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_rtu_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_port_init
</UL>

<P><STRONG><a name="[126]"></a>mb_rtu_out</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mb_rtu.o(i.mb_rtu_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_txd_frame_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_feedback
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_feedback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_feedback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_feedback
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_feedback
</UL>

<P><STRONG><a name="[50]"></a>mb_rtu_receive</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mb_rtu.o(i.mb_rtu_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_rtu_receive &rArr; mb_timer_rcv_update
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_rcv_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[51]"></a>mb_rtu_rev_adjust</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mb_rtu.o(i.mb_rtu_rev_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_rtu_rev_adjust &rArr; mb_timer_rcv_outtime
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_rcv_outtime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_rcv_disable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_rxd_frame_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[53]"></a>mb_rtu_segmentation</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mb_rtu.o(i.mb_rtu_segmentation))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mb_rtu_segmentation &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_frame_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[52]"></a>mb_rtu_snd_frame</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mb_rtu.o(i.mb_rtu_snd_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mb_rtu_snd_frame &rArr; mb_serial_send &rArr; ETH_SOCKET_WriteBuffer &rArr; ETH_SOCKET_ReadByte2 &rArr; EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_snd_outtime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[11d]"></a>mb_serial_frame_info</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mb_serial.o(i.mb_serial_frame_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_serial_frame_info
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_tcp_segmentation
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_segmentation
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_segmentation
</UL>

<P><STRONG><a name="[11a]"></a>mb_serial_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mb_serial.o(i.mb_serial_init))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_init
</UL>

<P><STRONG><a name="[f3]"></a>mb_serial_rs485_dir</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mb_serial.o(i.mb_serial_rs485_dir))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_send
</UL>

<P><STRONG><a name="[128]"></a>mb_serial_rxd_frame_insert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mb_serial.o(i.mb_serial_rxd_frame_insert))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_tcp_receive
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_rev_adjust
</UL>

<P><STRONG><a name="[11f]"></a>mb_serial_send</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, mb_serial.o(i.mb_serial_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mb_serial_send &rArr; ETH_SOCKET_WriteBuffer &rArr; ETH_SOCKET_ReadByte2 &rArr; EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_rs485_dir
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_master_get_buf_id
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_tcp_snd_frame
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_snd_frame
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_snd_frame
</UL>

<P><STRONG><a name="[10b]"></a>mb_serial_txd_frame_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mb_serial.o(i.mb_serial_txd_frame_delete))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegisterMaster
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegisterMaster
</UL>

<P><STRONG><a name="[118]"></a>mb_serial_txd_frame_insert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mb_serial.o(i.mb_serial_txd_frame_insert))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_out
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_tcp_frame_conform
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_frame_conform
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_frame_conform
</UL>

<P><STRONG><a name="[4f]"></a>mb_tcp_frame_conform</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, mb_tcp.o(i.mb_tcp_frame_conform))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_tcp_frame_conform
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_txd_frame_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[121]"></a>mb_tcp_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mb_tcp.o(i.mb_tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_tcp_init &rArr; eth_user_init &rArr; ETH_SOCKET_RemoteVarConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_user_init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_port_init
</UL>

<P><STRONG><a name="[4b]"></a>mb_tcp_receive</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, mb_tcp.o(i.mb_tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mb_tcp_receive &rArr; ETH_SOCKET_ReadBuffer &rArr; ETH_SOCKET_ReadByte2 &rArr; EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SOCKET_ReadBuffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_rxd_frame_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[4c]"></a>mb_tcp_rev_adjust</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mb_tcp.o(i.mb_tcp_rev_adjust))
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[4e]"></a>mb_tcp_segmentation</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, mb_tcp.o(i.mb_tcp_segmentation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_tcp_segmentation &rArr; mb_serial_frame_info
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_frame_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[4d]"></a>mb_tcp_snd_frame</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mb_tcp.o(i.mb_tcp_snd_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mb_tcp_snd_frame &rArr; mb_serial_send &rArr; ETH_SOCKET_WriteBuffer &rArr; ETH_SOCKET_ReadByte2 &rArr; EHT_SPI_ReadByte1 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timer_snd_outtime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_serial_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_port.o(i.mb_port_init)
</UL>
<P><STRONG><a name="[11c]"></a>mb_timer_rcv_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb_timer.o(i.mb_timer_rcv_disable))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_rev_adjust
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_receive
</UL>

<P><STRONG><a name="[127]"></a>mb_timer_rcv_outtime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mb_timer.o(i.mb_timer_rcv_outtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_timer_rcv_outtime
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_rev_adjust
</UL>

<P><STRONG><a name="[11b]"></a>mb_timer_rcv_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mb_timer.o(i.mb_timer_rcv_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_timer_rcv_update
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_receive
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_receive
</UL>

<P><STRONG><a name="[11e]"></a>mb_timer_snd_outtime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mb_timer.o(i.mb_timer_snd_outtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_timer_snd_outtime
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_tcp_snd_frame
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_snd_frame
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_snd_frame
</UL>

<P><STRONG><a name="[f2]"></a>mb_timer_snd_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mb_timer.o(i.mb_timer_snd_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_timer_snd_update
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[114]"></a>mb_user_init</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, mb_user.o(i.mb_user_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mb_user_init &rArr; mb_port_init &rArr; mb_tcp_init &rArr; eth_user_init &rArr; ETH_SOCKET_RemoteVarConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_port_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>mb_user_poll</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mb_user.o(i.mb_user_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mb_user_poll &rArr; mb_port_poll &rArr; mb_err_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_port_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>motor_astaone</STRONG> (Thumb, 496 bytes, Stack size 80 bytes, plc_test.o(i.motor_astaone))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = motor_astaone &rArr; plc_motor_set_step_rst_flow &rArr; plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_cur_status
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_rst_flow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_pos_flow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_motor_scan
</UL>

<P><STRONG><a name="[130]"></a>motor_astatwo</STRONG> (Thumb, 410 bytes, Stack size 80 bytes, plc_test.o(i.motor_astatwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = motor_astatwo &rArr; plc_motor_set_step_rst_flow &rArr; plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_cur_status
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_rst_flow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_pos_flow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_motor_scan
</UL>

<P><STRONG><a name="[131]"></a>motor_step_waste_M5</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, plc_test.o(i.motor_step_waste_M5))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = motor_step_waste_M5 &rArr; plc_motor_set_step_rst_flow &rArr; plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_cur_status
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_rst_flow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_pos_flow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_motor_scan
</UL>

<P><STRONG><a name="[132]"></a>motor_step_waste_M6</STRONG> (Thumb, 218 bytes, Stack size 80 bytes, plc_test.o(i.motor_step_waste_M6))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = motor_step_waste_M6 &rArr; plc_motor_set_step_rst_flow &rArr; plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_cur_status
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_rst_flow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_pos_flow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_motor_scan
</UL>

<P><STRONG><a name="[133]"></a>motor_step_waste_M7</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, plc_test.o(i.motor_step_waste_M7))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = motor_step_waste_M7 &rArr; plc_motor_set_step_rst_flow &rArr; plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_cur_status
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_rst_flow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_pos_flow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_motor_scan
</UL>

<P><STRONG><a name="[134]"></a>motor_steptf</STRONG> (Thumb, 522 bytes, Stack size 80 bytes, plc_test.o(i.motor_steptf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = motor_steptf &rArr; plc_motor_set_step_rst_flow &rArr; plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_cur_status
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_rst_flow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_pos_flow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_motor_scan
</UL>

<P><STRONG><a name="[135]"></a>plc_beep_feedback</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, plc_beep.o(i.plc_beep_feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = plc_beep_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_out
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_scan
</UL>

<P><STRONG><a name="[165]"></a>plc_beep_modbus_read</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, plc_beep.o(i.plc_beep_modbus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plc_beep_modbus_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_read
</UL>

<P><STRONG><a name="[16a]"></a>plc_beep_modbus_write</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, plc_beep.o(i.plc_beep_modbus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_beep_modbus_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_write
</UL>

<P><STRONG><a name="[136]"></a>plc_beep_scan</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, plc_beep.o(i.plc_beep_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = plc_beep_scan &rArr; plc_beep_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_set
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_feedback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_scan
</UL>

<P><STRONG><a name="[137]"></a>plc_beep_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, plc_beep.o(i.plc_beep_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_beep_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_scan
</UL>

<P><STRONG><a name="[138]"></a>plc_bridge_feedback</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, plc_bridge.o(i.plc_bridge_feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = plc_bridge_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_out
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_scan
</UL>

<P><STRONG><a name="[139]"></a>plc_bridge_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, plc_bridge.o(i.plc_bridge_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = plc_bridge_init &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_init
</UL>

<P><STRONG><a name="[164]"></a>plc_bridge_modbus_read</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, plc_bridge.o(i.plc_bridge_modbus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plc_bridge_modbus_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_read
</UL>

<P><STRONG><a name="[169]"></a>plc_bridge_modbus_write</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, plc_bridge.o(i.plc_bridge_modbus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_bridge_modbus_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_write
</UL>

<P><STRONG><a name="[13b]"></a>plc_bridge_scan</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, plc_bridge.o(i.plc_bridge_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = plc_bridge_scan &rArr; plc_bridge_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_set_value
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_set_dir
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_feedback
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_scan
</UL>

<P><STRONG><a name="[13c]"></a>plc_bridge_set_dir</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, plc_bridge.o(i.plc_bridge_set_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_bridge_set_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_scan
</UL>

<P><STRONG><a name="[13a]"></a>plc_bridge_set_value</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, plc_bridge.o(i.plc_bridge_set_value))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_scan
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_bridge
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run_bridge
</UL>

<P><STRONG><a name="[180]"></a>plc_button_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, plc_button.o(i.plc_button_init))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_init
</UL>

<P><STRONG><a name="[13d]"></a>plc_button_run</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, plc_button.o(i.plc_button_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = plc_button_run &rArr; plc_button_run_motor
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run_switch
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run_input
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run_delay
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run_beep
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_set_port
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run_motor
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run_bridge
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_switch_scan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_scan
</UL>

<P><STRONG><a name="[141]"></a>plc_button_run_beep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, plc_button.o(i.plc_button_run_beep))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run
</UL>

<P><STRONG><a name="[140]"></a>plc_button_run_bridge</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, plc_bridge.o(i.plc_button_run_bridge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = plc_button_run_bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run
</UL>

<P><STRONG><a name="[142]"></a>plc_button_run_delay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, plc_button.o(i.plc_button_run_delay))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run
</UL>

<P><STRONG><a name="[13e]"></a>plc_button_run_input</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, plc_button.o(i.plc_button_run_input))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run
</UL>

<P><STRONG><a name="[143]"></a>plc_button_run_motor</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, plc_motor.o(i.plc_button_run_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = plc_button_run_motor
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run
</UL>

<P><STRONG><a name="[13f]"></a>plc_button_run_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, plc_button.o(i.plc_button_run_switch))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run
</UL>

<P><STRONG><a name="[146]"></a>plc_button_scan</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, plc_button.o(i.plc_button_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = plc_button_scan &rArr; plc_button_stop &rArr; plc_button_stop_bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_scan
</UL>

<P><STRONG><a name="[147]"></a>plc_button_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, plc_button.o(i.plc_button_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = plc_button_stop &rArr; plc_button_stop_bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_switch
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_input
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_delay
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_beep
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_set_port
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_motor
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_bridge
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_switch_scan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_scan
</UL>

<P><STRONG><a name="[14b]"></a>plc_button_stop_beep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, plc_button.o(i.plc_button_stop_beep))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop
</UL>

<P><STRONG><a name="[14a]"></a>plc_button_stop_bridge</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, plc_bridge.o(i.plc_button_stop_bridge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = plc_button_stop_bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop
</UL>

<P><STRONG><a name="[14c]"></a>plc_button_stop_delay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, plc_button.o(i.plc_button_stop_delay))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop
</UL>

<P><STRONG><a name="[148]"></a>plc_button_stop_input</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, plc_button.o(i.plc_button_stop_input))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop
</UL>

<P><STRONG><a name="[14d]"></a>plc_button_stop_motor</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, plc_motor.o(i.plc_button_stop_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_button_stop_motor
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_pul
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop
</UL>

<P><STRONG><a name="[149]"></a>plc_button_stop_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, plc_button.o(i.plc_button_stop_switch))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop
</UL>

<P><STRONG><a name="[a0]"></a>plc_can_receive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, plc_can.o(i.plc_can_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plc_can_receive &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
</UL>

<P><STRONG><a name="[152]"></a>plc_delay_feedback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, plc_delay.o(i.plc_delay_feedback))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_delay_scan
</UL>

<P><STRONG><a name="[151]"></a>plc_delay_scan</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, plc_delay.o(i.plc_delay_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = plc_delay_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_delay_feedback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_scan
</UL>

<P><STRONG><a name="[181]"></a>plc_eep_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, plc_eep.o(i.plc_eep_init))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_init
</UL>

<P><STRONG><a name="[153]"></a>plc_eep_modbus_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, plc_eep.o(i.plc_eep_modbus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_read
</UL>

<P><STRONG><a name="[155]"></a>plc_eep_modbus_write</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, plc_eep.o(i.plc_eep_modbus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = plc_eep_modbus_write &rArr; plc_eep_write_buf &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_write
</UL>

<P><STRONG><a name="[154]"></a>plc_eep_read_buf</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, plc_eep.o(i.plc_eep_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_modbus_read
</UL>

<P><STRONG><a name="[157]"></a>plc_eep_read_value</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, plc_eep.o(i.plc_eep_read_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = plc_eep_read_value &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_config
</UL>

<P><STRONG><a name="[156]"></a>plc_eep_write_buf</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, plc_eep.o(i.plc_eep_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = plc_eep_write_buf &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_modbus_write
</UL>

<P><STRONG><a name="[158]"></a>plc_flow_config</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, plc_flow.o(i.plc_flow_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = plc_flow_config &rArr; plc_eep_read_value &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_read_value
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_init
</UL>

<P><STRONG><a name="[159]"></a>plc_flow_test_motor_scan</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, plc_test.o(i.plc_flow_test_motor_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = plc_flow_test_motor_scan &rArr; motor_steptf &rArr; plc_motor_set_step_rst_flow &rArr; plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_steptf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M7
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M6
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M5
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astatwo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astaone
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_scan
</UL>

<P><STRONG><a name="[15a]"></a>plc_flow_test_scan</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, plc_test.o(i.plc_flow_test_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = plc_flow_test_scan &rArr; plc_flow_test_motor_scan &rArr; motor_steptf &rArr; plc_motor_set_step_rst_flow &rArr; plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_switch_scan
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_motor_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_scan
</UL>

<P><STRONG><a name="[15b]"></a>plc_flow_test_switch_scan</STRONG> (Thumb, 1302 bytes, Stack size 72 bytes, plc_test.o(i.plc_flow_test_switch_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = plc_flow_test_switch_scan &rArr; plc_switch_set_flow
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_con
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_set_flow
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_cur_postion
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_scan
</UL>

<P><STRONG><a name="[15e]"></a>plc_input_feedback</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, plc_input.o(i.plc_input_feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = plc_input_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_out
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_scan
</UL>

<P><STRONG><a name="[15f]"></a>plc_input_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, plc_input.o(i.plc_input_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_input_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_init
</UL>

<P><STRONG><a name="[162]"></a>plc_input_modbus_read</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, plc_input.o(i.plc_input_modbus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plc_input_modbus_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_read
</UL>

<P><STRONG><a name="[167]"></a>plc_input_modbus_write</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, plc_input.o(i.plc_input_modbus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_input_modbus_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_write
</UL>

<P><STRONG><a name="[10a]"></a>plc_input_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plc_input.o(i.plc_input_read))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_con
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_rst_flow
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_rst
</UL>

<P><STRONG><a name="[12d]"></a>plc_input_read_flow</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, plc_input.o(i.plc_input_read_flow))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_switch_scan
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_steptf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M7
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M6
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M5
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astatwo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astaone
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_scan
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_config
</UL>

<P><STRONG><a name="[160]"></a>plc_input_scan</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, plc_input.o(i.plc_input_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = plc_input_scan &rArr; plc_input_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_feedback
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_scan
</UL>

<P><STRONG><a name="[a3]"></a>plc_input_write</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, plc_input.o(i.plc_input_write))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[161]"></a>plc_modbus_adjust</STRONG> (Thumb, 202 bytes, Stack size 12 bytes, plc_modbus.o(i.plc_modbus_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plc_modbus_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_read
</UL>

<P><STRONG><a name="[10e]"></a>plc_modbus_read</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, plc_modbus.o(i.plc_modbus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_modbus_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_modbus_read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_modbus_read
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_modbus_read
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_modbus_read
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_modbus_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_out
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[10f]"></a>plc_modbus_write</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, plc_modbus.o(i.plc_modbus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = plc_modbus_write &rArr; plc_eep_modbus_write &rArr; plc_eep_write_buf &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_modbus_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_modbus_write
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_modbus_write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_modbus_write
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_modbus_write
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_modbus_write
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[15d]"></a>plc_motor_cur_postion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plc_motor.o(i.plc_motor_cur_postion))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_switch_scan
</UL>

<P><STRONG><a name="[12c]"></a>plc_motor_cur_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plc_motor.o(i.plc_motor_cur_status))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_steptf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M7
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M6
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M5
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astatwo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astaone
</UL>

<P><STRONG><a name="[5d]"></a>plc_motor_curve_buf_pos</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, plc_motor.o(i.plc_motor_curve_buf_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = plc_motor_curve_buf_pos &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Address Reference Count : 2]<UL><LI> plc_motor.o(i.plc_motor_modbus_write)
<LI> plc_motor.o(i.plc_motor_set_step_pos_flow)
</UL>
<P><STRONG><a name="[5b]"></a>plc_motor_curve_buf_rst</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, plc_motor.o(i.plc_motor_curve_buf_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = plc_motor_curve_buf_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Address Reference Count : 2]<UL><LI> plc_motor.o(i.plc_motor_modbus_write)
<LI> plc_motor.o(i.plc_motor_set_step_rst_flow)
</UL>
<P><STRONG><a name="[5f]"></a>plc_motor_curve_init_pos</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, plc_motor.o(i.plc_motor_curve_init_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = plc_motor_curve_init_pos &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_pos_flow
</UL>
<BR>[Address Reference Count : 2]<UL><LI> plc_motor.o(i.plc_motor_modbus_write)
<LI> plc_motor.o(i.plc_motor_set_step_pos_flow)
</UL>
<P><STRONG><a name="[5c]"></a>plc_motor_curve_init_rst</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, plc_motor.o(i.plc_motor_curve_init_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_rst_flow
</UL>
<BR>[Address Reference Count : 2]<UL><LI> plc_motor.o(i.plc_motor_modbus_write)
<LI> plc_motor.o(i.plc_motor_set_step_rst_flow)
</UL>
<P><STRONG><a name="[173]"></a>plc_motor_feedback</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, plc_motor.o(i.plc_motor_feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = plc_motor_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_out
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_scan
</UL>

<P><STRONG><a name="[174]"></a>plc_motor_freq_down</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, plc_motor.o(i.plc_motor_freq_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = plc_motor_freq_down &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_rst
</UL>

<P><STRONG><a name="[17f]"></a>plc_motor_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, plc_motor.o(i.plc_motor_init))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_init
</UL>

<P><STRONG><a name="[166]"></a>plc_motor_modbus_read</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, plc_motor.o(i.plc_motor_modbus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = plc_motor_modbus_read &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_read
</UL>

<P><STRONG><a name="[16b]"></a>plc_motor_modbus_write</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, plc_motor.o(i.plc_motor_modbus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = plc_motor_modbus_write &rArr; plc_motor_set_bldc_flow &rArr; plc_motor_timer_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_bldc_flow
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_write
</UL>

<P><STRONG><a name="[179]"></a>plc_motor_pos_flag</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, plc_test.o(i.plc_motor_pos_flag))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_pos
</UL>

<P><STRONG><a name="[e3]"></a>plc_motor_pul_action</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, plc_motor.o(i.plc_motor_pul_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plc_motor_pul_action
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[5e]"></a>plc_motor_pul_action_pos</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, plc_motor.o(i.plc_motor_pul_action_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = plc_motor_pul_action_pos &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pos_flag
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishRun
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_read_camera
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_timer_deletc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> plc_motor.o(i.plc_motor_modbus_write)
<LI> plc_motor.o(i.plc_motor_set_step_pos_flow)
</UL>
<P><STRONG><a name="[5a]"></a>plc_motor_pul_action_rst</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, plc_motor.o(i.plc_motor_pul_action_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = plc_motor_pul_action_rst &rArr; plc_motor_freq_down &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_timer_deletc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_freq_down
</UL>
<BR>[Address Reference Count : 2]<UL><LI> plc_motor.o(i.plc_motor_modbus_write)
<LI> plc_motor.o(i.plc_motor_set_step_rst_flow)
</UL>
<P><STRONG><a name="[17b]"></a>plc_motor_scan</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, plc_motor.o(i.plc_motor_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = plc_motor_scan &rArr; plc_motor_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_feedback
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_scan
</UL>

<P><STRONG><a name="[175]"></a>plc_motor_set_bldc_flow</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, plc_motor.o(i.plc_motor_set_bldc_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plc_motor_set_bldc_flow &rArr; plc_motor_timer_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_timer_insert
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_timer_deletc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_pul
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_modbus_write
</UL>

<P><STRONG><a name="[176]"></a>plc_motor_set_dir</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, plc_motor.o(i.plc_motor_set_dir))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_modbus_write
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_rst_flow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_step_pos_flow
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_bldc_flow
</UL>

<P><STRONG><a name="[14f]"></a>plc_motor_set_pul</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plc_motor.o(i.plc_motor_set_pul))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_bldc_flow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop_motor
</UL>

<P><STRONG><a name="[12f]"></a>plc_motor_set_step_pos_flow</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, plc_motor.o(i.plc_motor_set_step_pos_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = plc_motor_set_step_pos_flow &rArr; plc_motor_curve_init_pos &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_dir
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_steptf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M7
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M6
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M5
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astatwo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astaone
</UL>

<P><STRONG><a name="[12e]"></a>plc_motor_set_step_rst_flow</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, plc_motor.o(i.plc_motor_set_step_rst_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = plc_motor_set_step_rst_flow &rArr; plc_motor_curve_init_rst &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_dir
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_steptf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M7
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M6
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_step_waste_M5
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astatwo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_astaone
</UL>

<P><STRONG><a name="[177]"></a>plc_motor_timer_deletc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, plc_motor.o(i.plc_motor_timer_deletc))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_bldc_flow
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_rst
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_pul_action_pos
</UL>

<P><STRONG><a name="[172]"></a>plc_motor_timer_insert</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, plc_motor.o(i.plc_motor_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plc_motor_timer_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_set_bldc_flow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_rst
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_curve_init_pos
</UL>

<P><STRONG><a name="[17c]"></a>plc_switch_feedback</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, plc_switch.o(i.plc_switch_feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = plc_switch_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_out
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_scan
</UL>

<P><STRONG><a name="[17d]"></a>plc_switch_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, plc_switch.o(i.plc_switch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = plc_switch_init &rArr; plc_switch_set_port
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_set_port
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_init
</UL>

<P><STRONG><a name="[163]"></a>plc_switch_modbus_read</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, plc_switch.o(i.plc_switch_modbus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plc_switch_modbus_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_read
</UL>

<P><STRONG><a name="[168]"></a>plc_switch_modbus_write</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, plc_switch.o(i.plc_switch_modbus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_switch_modbus_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_modbus_write
</UL>

<P><STRONG><a name="[17e]"></a>plc_switch_scan</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, plc_switch.o(i.plc_switch_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = plc_switch_scan &rArr; plc_switch_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_feedback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_read_flow
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_set_port
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_scan
</UL>

<P><STRONG><a name="[15c]"></a>plc_switch_set_flow</STRONG> (Thumb, 106 bytes, Stack size 36 bytes, plc_switch.o(i.plc_switch_set_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = plc_switch_set_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_switch_scan
</UL>

<P><STRONG><a name="[144]"></a>plc_switch_set_port</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, plc_switch.o(i.plc_switch_set_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_switch_set_port
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_user_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_stop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_run
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_scan
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_init
</UL>

<P><STRONG><a name="[113]"></a>plc_user_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, plc_user.o(i.plc_user_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = plc_user_init &rArr; plc_flow_config &rArr; plc_eep_read_value &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_set_port
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_eep_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>plc_user_scan</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, plc_user.o(i.plc_user_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = plc_user_scan &rArr; plc_input_scan &rArr; plc_input_feedback &rArr; mb_rtu_out &rArr; plc_modbus_read &rArr; plc_eep_modbus_read &rArr; plc_eep_read_buf &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_switch_scan
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_motor_scan
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_input_scan
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_flow_test_scan
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_delay_scan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_button_scan
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_bridge_scan
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_beep_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>prveMBError2Exception</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mb_utils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegisterSlave
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegisterSlave
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegisterSlave
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegisterSlave
</UL>

<P><STRONG><a name="[117]"></a>prvucMBLRC</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, mb_crc.o(i.prvucMBLRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvucMBLRC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_segmentation
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_ascii_frame_conform
</UL>

<P><STRONG><a name="[125]"></a>usMBCRC16</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, mb_crc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_out
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_segmentation
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_rtu_frame_conform
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fe]"></a>MX_CAN_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.MX_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_CAN_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>MX_GPIO_Init</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>MX_SPI2_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>MX_TIM3_Init</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, main.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>MX_TIM5_Init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, main.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>MX_TIM8_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, main.o(i.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>I2C_DMAAbort</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DMAAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[f6]"></a>I2C_ITError</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
</UL>

<P><STRONG><a name="[fd]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[aa]"></a>I2C_MasterReceive_BTF</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i.I2C_MasterReceive_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterReceive_BTF
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>I2C_MasterReceive_RXNE</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i.I2C_MasterReceive_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterReceive_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>I2C_MasterTransmit_BTF</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i.I2C_MasterTransmit_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterTransmit_BTF
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>I2C_MasterTransmit_TXE</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i.I2C_MasterTransmit_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterTransmit_TXE
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>I2C_Master_ADDR</STRONG> (Thumb, 282 bytes, Stack size 20 bytes, stm32f1xx_hal_i2c.o(i.I2C_Master_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_Master_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>I2C_Master_SB</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.I2C_Master_SB))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[b7]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[ac]"></a>I2C_Slave_STOPF</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_Slave_STOPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[b3]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[fc]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[b5]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[b8]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[c7]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[c6]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[cd]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d0]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[db]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[dd]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[de]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[ce]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[cf]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[49]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[e6]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e9]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
